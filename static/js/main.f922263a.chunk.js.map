{"version":3,"sources":["problems/findmax.js","Problem.js","TeacherView/Student.js","TeacherView/Students.js","TeacherView/TeacherView.js","StudentView/RunButton.js","StudentView/Popup.js","StudentView/StudentView.js","StudentView/IntroScreen.js","App.js","serviceWorker.js","index.js"],"names":["FindMax","className","language","style","monokai","Problem","props","Student","name","status","Students","TeacherView","filename","RunButton","id","onClick","e","preventDefault","script","content","main","input","console","log","setCorrect","togglePopup","test","Function","Popup","this","text","React","Component","StudentView","state","starterCode","showPopup","correct","bind","handleChange","newValue","setState","newCorrect","mode","theme","onChange","value","width","height","fontSize","editorProps","$blockScrolling","studentName","Correct","method","action","type","SubmitButton","useHistory","IntroScreen","event","changeStudentName","target","color","placeholder","required","App","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f922263a.chunk.js","sourcesContent":["import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { monokai } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nfunction FindMax () {\n    return (<div className=\"problem-statement\">\n    <h1>Maximum Practice</h1>\n    <i><b>Skills practiced:</b> Array, Looping</i>\n    <p>Find the maximum value in an array of integers using a <code>for</code> loop.</p>\n\n    <h2>Input</h2>\n    <p>An array of integers.</p>\n\n    <h2>Output</h2>\n    <p>The largest integer in the array.</p>\n\n    <h2>Example</h2>\n    <i>Input</i><br></br>\n    <SyntaxHighlighter language=\"javascript\" style={monokai}>[5, -4, 3, 1, 7]</SyntaxHighlighter><br/><br/>\n\n    <i>Output</i><br></br>\n    <SyntaxHighlighter language=\"javascript\" style={monokai}>5</SyntaxHighlighter>\n\n    <h2>Instructions:</h2>\n    <p>Modify the main function to return the correct output.</p>\n    <div className=\"tooltip\">Hover here for a hint\n        <span className=\"tooltiptext\">Try storing the maximum value in a variable and updating it as you go along.</span>\n    </div>\n    </div>);\n};\n\nexport default FindMax;\n\n","import React from 'react';\nimport FindMax from './problems/findmax.js';\n\nfunction Problem(props) {\n  return (\n    <div className=\"problem\">\n        <FindMax/>\n    </div>\n  );\n}\n\nexport default Problem;\n","import React from 'react';\n\nfunction Student(props) {\n  return (\n    <div className=\"student\">\n        {props.name}\n        {props.status}\n    </div>\n  );\n}\n\nexport default Student;\n","import React from 'react';\nimport Student from './Student.js';\n\nfunction Students() {\n  return (\n    <div className=\"students\">\n      <Student name={\"John Mulaney\"} status={\"completed\"}></Student>\n    </div>\n  );\n}\n\nexport default Students;\n","import React from 'react';\nimport Problem from '../Problem.js';\nimport Students from './Students.js';\n\nfunction TeacherView() {\n  return (\n    <div className=\"teacher-view\">\n      <Problem filename={\"findmax.txt\"}/>\n      <Students></Students>\n    </div>\n  );\n}\n\nexport default TeacherView;\n","import React from 'react';\n\nfunction RunButton(props) {\n\n    function handleClick(e) {\n        e.preventDefault();\n        const script = props.content;\n        let main = Function(\"return \" + script)(); // Could be risky to do this, but let's assume no one is malicious.\n        test(main); // Eventually should make sure the user has not changed the function name.\n    }\n\n    function test(main) {\n        let input = [1, 5, 4, 3, 2];\n        let output = 0; //CHANGE THIS LATER\n        console.log(main(input));\n        if(main(input) === output) {\n            console.log(\"It works\");\n            props.setCorrect(true);\n            \n            //.then(result=>result.json()).then(res=>console.log(res));\n        } else {\n            props.setCorrect(false);\n            console.log(\"It doesn't work.\")\n        }\n        props.togglePopup();\n    }\n\n    return (\n    <button id=\"run-button\" className=\"pure-material-button-contained\" onClick={handleClick}>\n        Run\n        </button>\n    );\n}\n\nexport default RunButton;\n","import React from 'react';  \nimport './student.css';  \n\nclass Popup extends React.Component {  \n    render() {  \n        return (  \n            <div className='popup'>  \n                <div className='popup\\_inner'>  \n                    <h1>{this.props.text}</h1>  \n                    <button onClick={this.props.togglePopup}>close me</button>  \n                </div>  \n            </div>  \n        );  \n    }  \n}  \n\nexport default Popup;","import React from 'react';\nimport Problem from '../Problem.js';\nimport AceEditor from \"react-ace\";\nimport RunButton from './RunButton'\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"./student.css\";\nimport Popup from './Popup.js';\n\nclass StudentView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {content: starterCode, showPopup: false, correct: false};\n    this.togglePopup = this.togglePopup.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.setCorrect = this.setCorrect.bind(this);\n  }\n\n  handleChange(newValue) {\n    this.setState({ content:newValue});\n  }\n\n  togglePopup() {  \n    this.setState({  \n         showPopup: !this.state.showPopup  \n    });  \n  }\n  \n  setCorrect(newCorrect) {\n    this.setState({\n          correct: newCorrect\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"student-view\">\n        <Problem filename={\"findmax.txt\"}/>\n        <AceEditor\n          id=\"code-editor\"\n          mode=\"javascript\"\n          theme=\"monokai\"\n          onChange={this.handleChange}\n          value={this.state.content}\n          width=\"auto\"\n          height=\"auto\"\n          fontSize={14}\n          name=\"code-editor\"\n          editorProps={{ $blockScrolling:true }}/>\n        <RunButton name={this.props.studentName} content={this.state.content} togglePopup={this.togglePopup} setCorrect={this.setCorrect} />\n        \n        {this.state.showPopup ?\n        <Popup\n            text={this.state.correct? <Correct></Correct> : \"Not all test cases passed. Please try again.\"}\n            togglePopup={this.togglePopup}\n          />\n        : null }\n      </div>\n    );\n  }\n}\n\nfunction Correct() {\n  return (\n    <div>\n      Congrats! All test cases passed!\n    <form method=\"POST\" action=\"https://arcane-spire-25876.herokuapp.com/api/users\">\n      <input type=\"hidden\" name=\"userFinished\" value=\"Anthony Zhou\" />\n      <input type=\"hidden\" name=\"url\" value=\"https://anthony-zhou.github.io/education-app/#/student\"/>\n      <button>Submit to teacher</button>\n    </form>\n    </div>\n  )\n}\n\nconst starterCode = `function (nums) {\n  //enter code\n  return 0;\n}\n`\n\nexport default StudentView;\n","import React from 'react';\nimport {useHistory} from 'react-router-dom';\n\nclass IntroScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name: \"\"};\n    this.handleChange = this.handleChange.bind(this);\n    \n    // this.handleOnSubmit = this.handleOnSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.changeStudentName(event.target.value);\n    this.setState({name: event.target.value});\n  }\n\n\n \n\n  render() {\n    return (\n      <div className = \"intro-screen\">\n      <div id = \"wrapper\">\n      <h1 style={{color: \"white\"}}>Welcome to the Education App!</h1>\n      <form method=\"POST\" action=\"https://arcane-spire-25876.herokuapp.com/api/users\">\n        <input type=\"hidden\" name=\"url\" value=\"http://localhost:3000/education-app/#/student\"/>\n        <input type=\"text\" name=\"name\" placeholder=\"Your name\" onChange={this.handleChange} value={this.state.name} required/>\n        <SubmitButton name={this.state.name}></SubmitButton>\n      </form>\n  </div>\n      </div>\n    );\n  }\n}\n\nfunction SubmitButton(props) {\n\n  let history = useHistory();\n\n  // function onClick(e) {\n  //   // e.preventDefault();\n  //   history.push(\"/student\")\n\n  // }\n\n  return (\n    <button id=\"signup-btn\" /*onClick={onClick}*/>start coding!</button>\n  );\n}\n\nexport default IntroScreen;\n","import React from 'react';\nimport TeacherView from './TeacherView/TeacherView.js';\nimport StudentView from './StudentView/StudentView.js';\nimport IntroScreen from './StudentView/IntroScreen.js';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {studentName: \"\"};\n    this.changeStudentName = this.changeStudentName.bind(this);\n  }\n\n  changeStudentName(name) {\n    this.setState({studentName: name});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Router basename=\"/\">\n          <Switch>\n            <Route path=\"/instructor\">\n              <TeacherView></TeacherView>\n            </Route>\n            <Route path=\"/student\">\n              <StudentView studentName={this.state.studentName}></StudentView>\n            </Route>\n            <Route path=\"/\">\n              <IntroScreen changeStudentName={this.changeStudentName}></IntroScreen>\n            </Route>\n          </Switch>\n        </Router>\n        \n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}